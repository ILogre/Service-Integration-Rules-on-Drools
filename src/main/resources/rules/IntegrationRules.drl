package integration
 
import java.util.HashMap; 
 
import transfer.*;
import transfer.datacenter.*;
import transfer.visudesign.*;
import transfer.association.*;
import transfer.notification.*;
import services.auxiliary.*;
import services.domainproxies.*;
import services.accesspoint.*;

import VisualizationDesignService.domain.*;

import message.DeclareDashboardMsg;
import message.CharacterizeVisuMsg;
import message.PlugDataMsg;
import message.PositionMsg;
import message.ValidateAndPersistDashboardMsg;
import message.IsValidatedDashboardMsg;
import message.IsValidatedDashboardAsw;

import message.DeclareCatalogMsg;
import message.BuildSensorHostingHierarchyMsg;
import message.RecordEventBasedSensorMsg;
import message.RecordPeriodicSensorMsg;
import message.SketchPatternMsg;
import message.IsDefinedMsg;
import message.IsDefinedAsw;
import message.ValidateAndPersistCatalogMsg;
import message.IsValidatedCatalogMsg;
import message.IsValidatedCatalogAsw;
import message.DescribeSensorMsg;
import message.DescribeSensorAsw;

/*********************************/
/******* Integration Rules *******/
/*********************************/


/** Visualization Design **/

	rule "Declare Dashboard"
	no-loop true
		when
			$msg : DeclareDashboardMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Declare Dashboard triggered !");
	    	$spy.increaseNbRulesExecuted();
			VisualizationDesignAP.declareDashboard($msg);
	end

/* Plug Data */

	rule "Plug Data - No Catalog linked"
	no-loop true
	    when
	        $msg : PlugDataMsg ( $dashboard : dashboardName) and
	      	(HasLinkedAsw ( answer == false ) from AssociationDP.hasLinked(new HasLinkedMsg($dashboard, "Dashboard", "Catalog"))
	        or $ans: GetLinkedAsw (type != "Catalog") from AssociationDP.getLinked(new GetLinkedMsg($dashboard, "Dashboard", "Catalog")))
	        and $spy : Spy()  
	    then
	    	System.out.println("[DROOLS]: Rule \"Plug Data - No Catalog\" triggered !");
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Plug Data - Resource matching Data"
	no-loop true
	    when
	        $msg : PlugDataMsg ( $dashboard : dashboardName, $dataName : dataName) and
	        HasLinkedAsw ( answer == true ) from AssociationDP.hasLinked(new HasLinkedMsg($dashboard, "Dashboard", "Catalog")) and
	        GetLinkedAsw ($catalog : model) from AssociationDP.getLinked(new GetLinkedMsg($dashboard, "Dashboard", "Catalog")) and
	        IsDefinedAsw (defined == true) from SensorDeploymentDP.isDefined(new IsDefinedMsg($catalog, $dataName)) and
			$spy : Spy()
	    then
	    	System.out.println("[DROOLS]: Rule \"Plug Data - Resource matching Data\" triggered !");
	    	$spy.increaseNbRulesExecuted();
	    	AssociationDP.link(new LinkMsg($dataName,"Dashboard",$catalog, "Catalog", true));
	end
	
	rule "Plug Data - No Resource matching Data"
	no-loop true
	    when
	        $msg : PlugDataMsg ( $dashboard : dashboardName, $dataName : dataName) and
	        HasLinkedAsw ( answer == true ) from AssociationDP.hasLinked(new HasLinkedMsg($dashboard, "Dashboard", "Catalog")) and
	        GetLinkedAsw ($catalog : model) from AssociationDP.getLinked(new GetLinkedMsg($dashboard, "Dashboard", "Catalog")) and
	        IsDefinedAsw (defined == false) from SensorDeploymentDP.isDefined(new IsDefinedMsg($catalog, $dataName)) and
			$spy : Spy()
	    then
	    	System.out.println("[DROOLS]: Rule \"Plug Data - No Resource matching Data\" triggered !");
	    	$spy.increaseNbRulesExecuted();
	end


/** Sensor Deployment **/


/** Miscalleneous **/


/***************************/
/****** Routing Rules ******/
/***************************/


/** Visualization Design **/

	rule "Characterize Visualization"
	no-loop true
		when
			$msg : CharacterizeVisuMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Characterize Visualization triggered !");
			VisualizationDesignAP.characterizeVisu($msg);
	    	$spy.increaseNbRulesExecuted();
	end

	rule "Position"
	no-loop true
		when
			$msg : PositionMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Position triggered !");
			VisualizationDesignAP.position($msg);
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Validate And Persist Dashboard"
	no-loop true
		when
			$msg : ValidateAndPersistDashboardMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Validate And Persist Dashboard triggered !");
			VisualizationDesignAP.validateAndPersist($msg);
	    	$spy.increaseNbRulesExecuted();
	end
			
	
	rule "Is Validated Dashboard"
	no-loop true
		when
			$msg : IsValidatedDashboardMsg()
			$mailbox : HashMap() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Is Validated Dashboard triggered !");
			$mailbox.put($msg, VisualizationDesignAP.isValidated($msg));
			update($mailbox);
	    	$spy.increaseNbRulesExecuted();
	end
			
	
	
/** Sensor Deployment **/

	rule "Declare Catalog"
		when
			$msg : DeclareCatalogMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Declare Catalog triggered !");
			SensorDeploymentAP.declareCatalog($msg);
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Build Sensor Hosting Hierarchy"
	no-loop true
		when
			$msg : BuildSensorHostingHierarchyMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Build Sensor Hosting Hierarchy triggered !");
			SensorDeploymentAP.buildSensorHostingHierarchy($msg);
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Record Event-Based Sensor"
	no-loop true
		when
			$msg : RecordEventBasedSensorMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Record Event-Based Sensor triggered !");
			SensorDeploymentAP.recordEventBasedSensor($msg);
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Record Periodic Sensor"
	no-loop true
		when
			$msg : RecordPeriodicSensorMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Record Periodic Sensor triggered !");
			SensorDeploymentAP.recordPeriodicSensor($msg);
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Sketch Pattern"
	no-loop true
		when
			$msg : SketchPatternMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Sketch Pattern triggered !");
			SensorDeploymentAP.sketchPattern($msg);
	    	$spy.increaseNbRulesExecuted();
	end	
	
	
	rule "Validate And Persist Catalog"
	no-loop true
		when
			$msg : ValidateAndPersistCatalogMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Validate And Persist Catalog triggered !");
			SensorDeploymentAP.validateAndPersist($msg);
	    	$spy.increaseNbRulesExecuted();
	end
			
	
	rule "Is Validated Catalog"
	no-loop true
		when
			$msg : IsValidatedCatalogMsg() and
			$spy : Spy()
			$mailbox : HashMap()
		then
	    	System.out.println("[DROOLS]: Rule Is Validated Catalog triggered !");
			$mailbox.put($msg, SensorDeploymentAP.isValidated($msg));
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Describe Sensor"
	no-loop true
		when
			$msg : DescribeSensorMsg() and
			$spy : Spy()
			$mailbox : HashMap()
		then
	    	System.out.println("[DROOLS]: Rule Describe Sensor triggered !");
			$mailbox.put($msg, SensorDeploymentAP.describeSensor($msg));
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Is Defined"
	no-loop true
		when
			$msg : IsDefinedMsg()
			$spy : Spy()
			$mailbox : HashMap()
		then
	    	System.out.println("[DROOLS]: Rule Is Defined triggered !");
			$mailbox.put($msg, SensorDeploymentAP.isDefined($msg));
	    	$spy.increaseNbRulesExecuted();
	end
	
	
/** Miscalleneous **/

	rule "Link"
	no-loop true
		when
			$msg : LinkMsg( ) and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Link triggered !");
			AssociationAP.link($msg);
	    	$spy.increaseNbRulesExecuted();
	end
	
	
	rule "Get Linked"
	no-loop true
		when
			$msg : GetLinkedMsg() and
			$spy : Spy()
			$mailbox : HashMap()
		then
	    	System.out.println("[DROOLS]: Rule Get Linked triggered !");
			$mailbox.put($msg, AssociationAP.getLinked($msg));
	    	$spy.increaseNbRulesExecuted();
	end
	
		
	rule "Has Linked"
	no-loop true
		when
			$msg : HasLinkedMsg() and
			$spy : Spy()
			$mailbox : HashMap()
		then
	    	System.out.println("[DROOLS]: Rule Has Linked triggered !");
			$mailbox.put($msg, AssociationAP.hasLinked($msg));
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Publish"
	no-loop true
		when
			$msg : PublishMsg() and
			$spy : Spy()
		then
	    	System.out.println("[DROOLS]: Rule Publish triggered !");
			NotificationAP.publish($msg);
	    	$spy.increaseNbRulesExecuted();
	end
	
	rule "Consult"
	no-loop true
		when
			$msg : ConsultMsg() and
			$spy : Spy()
			$mailbox : HashMap()
		then
	    	System.out.println("[DROOLS]: Rule Consult triggered !");
			$mailbox.put($msg, NotificationAP.consult($msg));
	    	$spy.increaseNbRulesExecuted();
	end


/***************************/
/********* Drafts **********/
/***************************/

/* Characterize 

rule "Characterize - Threshold - No Catalog"
    when
        $msg : CharacterizeVisuMsg ( $dashboard : dashboardName, $concernsMap : whatQualifier, $concernsMap.containsKey("Threshold") ) and
        $ans: GetLinkedAsw (model == null) from Association.getLinked(new GetLinkedMsg($dashboard))        
    then
    	System.out.println("Rule \"Characterize - Threshold - No Catalog\" triggered !");
    	//TODO Log : no integration
end

rule "Characterize - Threshold - One Catalog"
    when
        $msg : CharacterizeMsg ( $dashboard : dashboardName, $concernsMap : concerns, $concernsMap.containsKey("Threshold") ) and
        GetLinkedAsw ($catalog : model != null) from Association.getLinked(new GetLinkedMsg($dashboard))
        
    then
    	System.out.println("Rule \"Characterize - Threshold - One Catalog\" triggered !");
end


rule "Characterize - Threshold - Several Catalog"
    when
        $msg : CharacterizeMsg ( $dashboard : dashboardName, $concernsMap : concerns, $concernsMap.containsKey("Threshold") ) and
        $ans: GetLinkedAsw (model == null) from Association.getLinked(new GetLinkedMsg($dashboard))        
    then
    	System.out.println("Rule \"Characterize - Threshold - Several Catalog\" triggered !");
end
*/






